void cases(int n, int *returnSize, int open, int closed, char * add, char * partial, char **res){
    //printf("%s %d %d ", add, open, closed);
    char * par = malloc(sizeof(char) * (2*n+1));
    strcpy(par, partial);
    strcat(par, add);
    //printf("%s\n", par);
    if(closed == n){
        res[(*returnSize)++] = par;
        return;
    }
    if(open < n) cases(n, returnSize, open+1, closed, "(", par, res);
    if(closed < open)cases(n, returnSize, open, closed+1, ")", par, res);
}

char ** generateParenthesis(int n, int* returnSize){
    int s;
    if(n <= 4) s = 15;
    else s = (n <= 7) ? (n*n*3*n)/2 : n*n*n*3; 
    //an approximation, instead of the catalan number needed
    char ** res = malloc(sizeof(char *) * s);
    *returnSize = 0;
    //int open = 1, closed = 0;
    cases(n, returnSize, 1, 0, "(", "", res);
    
    return res;
}
